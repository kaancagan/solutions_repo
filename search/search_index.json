{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection 1. Motivation Projectile motion, though seemingly basic, offers a deep and insightful perspective into core physics concepts. The primary objective here is to explore how the range of a projectile varies as a function of the angle of projection . While the problem setup appears straightforward, it conceals a rich mathematical structure involving both linear and quadratic relationships. This topic is fascinating due to several influencing variables, such as: Initial velocity ( \\(v_0\\) ) Gravitational acceleration ( \\(g\\) ) Launch height ( \\(h\\) ) Each of these parameters contributes to a wide array of physical trajectories \u2014 from a soccer ball's curved path to a space rocket's arc. 2. Theoretical Foundation The equations governing projectile motion are derived using Newton\u2019s Second Law: 2.1. Equations of Motion In an idealized scenario (neglecting air resistance), the forces acting on a projectile are: Gravitational force in the vertical direction No horizontal forces From Newton\u2019s laws: Horizontal acceleration: $$ a_x = 0 $$ Vertical acceleration: $$ a_y = -g $$ Integrating over time \\(t\\) , we get the velocity components: \\[ v_x = v_0 \\cos(\\theta) \\] \\[ v_y = v_0 \\sin(\\theta) - gt \\] Integrating again gives the position equations: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 \\] These define the horizontal (constant velocity) and vertical (accelerated) motions. 2.2. Time of Flight To find the total time the projectile remains in the air, set \\(y(t) = 0\\) (assuming launch and landing occur at the same height): \\[ t = \\frac{2 v_0 \\sin(\\theta)}{g} \\] 2.3. Range Equation The range \\(R\\) is the total horizontal distance traveled before the projectile lands: Using horizontal motion: \\[ R = v_0 \\cos(\\theta) \\cdot t \\] Substitute time of flight: \\[ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Apply the identity: \\[ \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\] Final equation for range: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] 2.4. Maximum Range The range is maximized when \\(\\sin(2\\theta)\\) is at its peak value (which is 1): \\[ \\theta = 45^\\circ \\] Therefore, the maximum range occurs at a launch angle of \\(45^\\circ\\) when launch and landing heights are the same. 3. Range Analysis 3.1. Dependence on Angle The function \\(R(\\theta)\\) is symmetric around \\(45^\\circ\\) Angles \\(\\theta\\) and \\(90^\\circ - \\theta\\) yield the same range 3.2. Effect of Initial Velocity The range increases quadratically with initial speed: \\[ R \\propto v_0^2 \\] 3.3. Effect of Gravitational Acceleration Higher gravity (e.g., Jupiter) \u2192 shorter range Lower gravity (e.g., Moon) \u2192 longer range Summary Projectile range is influenced by several physical parameters, but follows a clear mathematical structure. By understanding the role of each parameter, especially the angle of projection, one can predict and optimize the trajectory of various real-world projectiles. Visualization with Air Resistance","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-motivation","text":"Projectile motion, though seemingly basic, offers a deep and insightful perspective into core physics concepts. The primary objective here is to explore how the range of a projectile varies as a function of the angle of projection . While the problem setup appears straightforward, it conceals a rich mathematical structure involving both linear and quadratic relationships. This topic is fascinating due to several influencing variables, such as: Initial velocity ( \\(v_0\\) ) Gravitational acceleration ( \\(g\\) ) Launch height ( \\(h\\) ) Each of these parameters contributes to a wide array of physical trajectories \u2014 from a soccer ball's curved path to a space rocket's arc.","title":"1. Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-theoretical-foundation","text":"The equations governing projectile motion are derived using Newton\u2019s Second Law:","title":"2. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-equations-of-motion","text":"In an idealized scenario (neglecting air resistance), the forces acting on a projectile are: Gravitational force in the vertical direction No horizontal forces From Newton\u2019s laws: Horizontal acceleration: $$ a_x = 0 $$ Vertical acceleration: $$ a_y = -g $$ Integrating over time \\(t\\) , we get the velocity components: \\[ v_x = v_0 \\cos(\\theta) \\] \\[ v_y = v_0 \\sin(\\theta) - gt \\] Integrating again gives the position equations: \\[ x(t) = v_0 \\cos(\\theta) \\cdot t \\] \\[ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 \\] These define the horizontal (constant velocity) and vertical (accelerated) motions.","title":"2.1. Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-time-of-flight","text":"To find the total time the projectile remains in the air, set \\(y(t) = 0\\) (assuming launch and landing occur at the same height): \\[ t = \\frac{2 v_0 \\sin(\\theta)}{g} \\]","title":"2.2. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#23-range-equation","text":"The range \\(R\\) is the total horizontal distance traveled before the projectile lands: Using horizontal motion: \\[ R = v_0 \\cos(\\theta) \\cdot t \\] Substitute time of flight: \\[ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} \\] Apply the identity: \\[ \\sin(2\\theta) = 2 \\sin(\\theta) \\cos(\\theta) \\] Final equation for range: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\]","title":"2.3. Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#24-maximum-range","text":"The range is maximized when \\(\\sin(2\\theta)\\) is at its peak value (which is 1): \\[ \\theta = 45^\\circ \\] Therefore, the maximum range occurs at a launch angle of \\(45^\\circ\\) when launch and landing heights are the same.","title":"2.4. Maximum Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-range-analysis","text":"","title":"3. Range Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-dependence-on-angle","text":"The function \\(R(\\theta)\\) is symmetric around \\(45^\\circ\\) Angles \\(\\theta\\) and \\(90^\\circ - \\theta\\) yield the same range","title":"3.1. Dependence on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-effect-of-initial-velocity","text":"The range increases quadratically with initial speed: \\[ R \\propto v_0^2 \\]","title":"3.2. Effect of Initial Velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-effect-of-gravitational-acceleration","text":"Higher gravity (e.g., Jupiter) \u2192 shorter range Lower gravity (e.g., Moon) \u2192 longer range","title":"3.3. Effect of Gravitational Acceleration"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary","text":"Projectile range is influenced by several physical parameters, but follows a clear mathematical structure. By understanding the role of each parameter, especially the angle of projection, one can predict and optimize the trajectory of various real-world projectiles. Visualization with Air Resistance","title":"Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Motivation The forced damped pendulum serves as a powerful model to explore nonlinear dynamical systems. When damping and external periodic forcing are introduced, the system exhibits a wide array of behaviors \u2014 from regular periodic motion to chaotic dynamics. These systems are relevant in multiple domains: Mechanical systems (e.g., suspension bridges, engines) Electrical circuits (analogous RLC systems) Climate and biological rhythms Introducing external periodic forcing adds two key parameters: Forcing amplitude ( \\(F_0\\) ) Driving frequency ( \\(\\omega_d\\) ) Tuning these parameters reveals various behaviors such as: Resonant amplification Synchronization Quasiperiodicity Chaos This understanding has practical uses in energy harvesting , vibration isolation , and resonance mitigation . 2. Theoretical Foundation 2.1. Governing Differential Equation We start with Newton\u2019s Second Law for rotational motion: Let: - \\(m\\) = mass of the pendulum bob - \\(L\\) = length of the pendulum - \\(\\theta\\) = angular displacement - \\(b\\) = damping coefficient - \\(F_0 \\cos(\\omega_d t)\\) = external periodic force The equation of motion becomes: \\[ m L^2 \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + mgL \\sin(\\theta) = F_0 \\cos(\\omega_d t) \\] Divide through by \\(mL^2\\) : \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{mL^2} \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = \\frac{F_0}{mL^2} \\cos(\\omega_d t) \\] Define: - Natural frequency: $$ \\omega_0^2 = \\frac{g}{L} $$ - Damping ratio: $$ \\gamma = \\frac{b}{mL^2} $$ - Forcing amplitude (normalized): $$ A = \\frac{F_0}{mL^2} $$ Final form: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega_d t) \\] This is a nonlinear , second-order, non-homogeneous differential equation. 2.2. Approximate Solution for Small Angles For small \\(\\theta\\) , we use the small-angle approximation : \\[ \\sin(\\theta) \\approx \\theta \\] Equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega_d t) \\] This is a linear inhomogeneous second-order ODE. 2.2.1. General Solution The general solution has two parts: a. Homogeneous Solution: Solving the associated homogeneous equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] Its characteristic equation: \\[ r^2 + \\gamma r + \\omega_0^2 = 0 \\] Depending on \\(\\gamma\\) , solutions are: Underdamped ( \\(\\gamma^2 < 4\\omega_0^2\\) ): $$ \\theta_h(t) = e^{-\\gamma t / 2} \\left( C_1 \\cos(\\omega_d' t) + C_2 \\sin(\\omega_d' t) \\right) $$ Where: $$ \\omega_d' = \\sqrt{\\omega_0^2 - \\left( \\frac{\\gamma}{2} \\right)^2} $$ Critically damped and overdamped cases produce non-oscillatory decay. b. Particular (Steady-State) Solution We seek a solution of the form: \\[ \\theta_p(t) = B \\cos(\\omega_d t - \\delta) \\] Where: - \\(B\\) = steady-state amplitude - \\(\\delta\\) = phase lag Amplitude is: \\[ B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega_d^2)^2 + \\gamma^2 \\omega_d^2}} \\] Phase lag: \\[ \\tan(\\delta) = \\frac{\\gamma \\omega_d}{\\omega_0^2 - \\omega_d^2} \\] 2.3. Resonance and Energy Considerations Resonance occurs when driving frequency approaches natural frequency: \\[ \\omega_d \\approx \\omega_0 \\] At resonance, the amplitude becomes: \\[ B_{\\text{max}} = \\frac{A}{\\gamma \\omega_0} \\quad \\text{(approx. when } \\omega_d = \\omega_0 \\text{)} \\] Implications: Small damping \\(\\Rightarrow\\) large amplitudes (possible instability) Large damping \\(\\Rightarrow\\) suppressed resonance Total mechanical energy of the pendulum: \\[ E(t) = \\frac{1}{2} m L^2 \\left( \\frac{d\\theta}{dt} \\right)^2 + mgL (1 - \\cos(\\theta)) \\] Energy is maximized at resonance. Damping plays a critical role in dissipating energy and avoiding structural damage. Summary The forced damped pendulum showcases a variety of dynamic behaviors based on system parameters. Its equation demonstrates how nonlinear dynamics , resonance , and chaotic motion can emerge even from a seemingly simple system. Code Explanation: Forced Damped Pendulum Simulation 1. Parameters We begin by defining the physical constants and initial conditions for the pendulum system: Gravitational acceleration : $$ g = 9.81 \\, \\text{m/s}^2 $$ Pendulum length : $$ L = 1.0 \\, \\text{m} $$ Damping coefficient : $$ \\gamma = 0.1 \\, \\text{s}^{-1} $$ Forcing amplitude : $$ A = 1.2 $$ Driving frequency : $$ \\omega_d = \\omega_0 = \\sqrt{\\frac{g}{L}} \\approx 3.13 \\, \\text{rad/s} $$ This matches the natural frequency to investigate resonance conditions. 2. Initial Conditions We start the simulation with: Initial angle (displacement): $$ \\theta(0) = 0.1 \\, \\text{rad} $$ Initial angular velocity: $$ \\dot{\\theta}(0) = 0.0 \\, \\text{rad/s} $$ 3. ODE System Definition We model the system using the second-order nonlinear ODE: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega_d t) \\] This is rewritten as a first-order system: Let: - \\(x_1 = \\theta\\) (angle) - \\(x_2 = \\dot{\\theta}\\) (angular velocity) Then: \\[ \\begin{cases} \\frac{dx_1}{dt} = x_2 \\\\ \\frac{dx_2}{dt} = -\\gamma x_2 - \\omega_0^2 \\sin(x_1) + A \\cos(\\omega_d t) \\end{cases} \\] This system is implemented in code via a function like: def pendulum_derivatives(t, state): theta, omega = state dtheta_dt = omega domega_dt = -gamma * omega - (g / L) * np.sin(theta) + A * np.cos(omega_d * t) return np.array([dtheta_dt, domega_dt]) Forced Damped Pendulum Simulation This simulation investigates the dynamic behavior of a forced damped pendulum using Python's scientific libraries: NumPy , Matplotlib , and SciPy . The goal is to visualize the system's response under various damping and forcing conditions. 1. Setup The simulation initializes with the following parameters: Gravitational acceleration : $$ g = 9.81 \\, \\text{m/s}^2 $$ Pendulum length : $$ L = 1.0 \\, \\text{m} $$ Damping coefficients : $$ \\gamma = \\frac{b}{L}, \\quad \\text{where } b \\in {0.1, 0.5, 1.0} $$ Forcing amplitudes : $$ F_0 \\in {0.5, 1.2, 2.0} $$ Driving frequencies : $$ \\omega_d \\in {1.0, 2.0, 3.0} $$ Natural frequency : $$ \\omega_0 = \\sqrt{\\frac{g}{L}} \\approx 3.13 \\, \\text{rad/s} $$ 2. Governing Equations The system is described by a nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = F_0 \\cos(\\omega_d t) \\] Rewriting as a system of first-order equations: Let \\(\\theta\\) be the angle Let \\(\\omega = \\frac{d\\theta}{dt}\\) be the angular velocity Then: \\[ \\frac{d\\theta}{dt} = \\omega \\] \\[ \\frac{d\\omega}{dt} = -\\gamma \\omega - \\omega_0^2 \\sin(\\theta) + F_0 \\cos(\\omega_d t) \\] 3. Numerical Simulation Numerical integration is performed using the Runge-Kutta 4(5) method via solve_ivp . Simulation time span: \\(t \\in [0, 50]\\) seconds Initial conditions: $$ \\theta(0) = 0.1 \\, \\text{rad}, \\quad \\omega(0) = 0 \\, \\text{rad/s} $$ 4. Visualization a. Angular Displacement Plots \\(\\theta(t)\\) for each combination of \\(b\\) , \\(F_0\\) , and \\(\\omega_d\\) . Demonstrates how damping and external forcing affect the pendulum's motion. b. Phase Portrait Plots \\(\\omega\\) vs. \\(\\theta\\) for one representative case. Illustrates the system's trajectory in phase space . c. Poincar\u00e9 Section A discrete sampling of the phase space: $$ \\left(\\theta(t_n), \\omega(t_n)\\right) \\quad \\text{for every 20th time step} $$ Useful for detecting periodicity or chaos. d. Bifurcation Diagram Varies driving frequency \\(\\omega_d \\in [0.5, 3.0]\\) . For each \\(\\omega_d\\) , records final 50 values of \\(\\theta(t)\\) . Reveals transitions between periodic and chaotic regimes. 5. Discussion Limitations No small-angle approximation : The full nonlinear \\(\\sin(\\theta)\\) is used. Damping is linear : Realistic damping may be velocity-squared (quadratic). External forcing is idealized as perfectly periodic. Possible Extensions Nonlinear damping : Include terms like \\(-k \\omega^2 \\operatorname{sign}(\\omega)\\) to better reflect air resistance. Stochastic forcing : Add noise to the forcing function to simulate real-world irregularities: $$ F_0 \\cos(\\omega_d t) + \\text{random noise} $$ Coupled pendulums : Expand to multiple pendulums interacting to explore multi-degree-of-freedom systems.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-motivation","text":"The forced damped pendulum serves as a powerful model to explore nonlinear dynamical systems. When damping and external periodic forcing are introduced, the system exhibits a wide array of behaviors \u2014 from regular periodic motion to chaotic dynamics. These systems are relevant in multiple domains: Mechanical systems (e.g., suspension bridges, engines) Electrical circuits (analogous RLC systems) Climate and biological rhythms Introducing external periodic forcing adds two key parameters: Forcing amplitude ( \\(F_0\\) ) Driving frequency ( \\(\\omega_d\\) ) Tuning these parameters reveals various behaviors such as: Resonant amplification Synchronization Quasiperiodicity Chaos This understanding has practical uses in energy harvesting , vibration isolation , and resonance mitigation .","title":"1. Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-theoretical-foundation","text":"","title":"2. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-governing-differential-equation","text":"We start with Newton\u2019s Second Law for rotational motion: Let: - \\(m\\) = mass of the pendulum bob - \\(L\\) = length of the pendulum - \\(\\theta\\) = angular displacement - \\(b\\) = damping coefficient - \\(F_0 \\cos(\\omega_d t)\\) = external periodic force The equation of motion becomes: \\[ m L^2 \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + mgL \\sin(\\theta) = F_0 \\cos(\\omega_d t) \\] Divide through by \\(mL^2\\) : \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{mL^2} \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = \\frac{F_0}{mL^2} \\cos(\\omega_d t) \\] Define: - Natural frequency: $$ \\omega_0^2 = \\frac{g}{L} $$ - Damping ratio: $$ \\gamma = \\frac{b}{mL^2} $$ - Forcing amplitude (normalized): $$ A = \\frac{F_0}{mL^2} $$ Final form: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega_d t) \\] This is a nonlinear , second-order, non-homogeneous differential equation.","title":"2.1. Governing Differential Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-approximate-solution-for-small-angles","text":"For small \\(\\theta\\) , we use the small-angle approximation : \\[ \\sin(\\theta) \\approx \\theta \\] Equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega_d t) \\] This is a linear inhomogeneous second-order ODE.","title":"2.2. Approximate Solution for Small Angles"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#221-general-solution","text":"The general solution has two parts:","title":"2.2.1. General Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#a-homogeneous-solution","text":"Solving the associated homogeneous equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] Its characteristic equation: \\[ r^2 + \\gamma r + \\omega_0^2 = 0 \\] Depending on \\(\\gamma\\) , solutions are: Underdamped ( \\(\\gamma^2 < 4\\omega_0^2\\) ): $$ \\theta_h(t) = e^{-\\gamma t / 2} \\left( C_1 \\cos(\\omega_d' t) + C_2 \\sin(\\omega_d' t) \\right) $$ Where: $$ \\omega_d' = \\sqrt{\\omega_0^2 - \\left( \\frac{\\gamma}{2} \\right)^2} $$ Critically damped and overdamped cases produce non-oscillatory decay.","title":"a. Homogeneous Solution:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#b-particular-steady-state-solution","text":"We seek a solution of the form: \\[ \\theta_p(t) = B \\cos(\\omega_d t - \\delta) \\] Where: - \\(B\\) = steady-state amplitude - \\(\\delta\\) = phase lag Amplitude is: \\[ B = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega_d^2)^2 + \\gamma^2 \\omega_d^2}} \\] Phase lag: \\[ \\tan(\\delta) = \\frac{\\gamma \\omega_d}{\\omega_0^2 - \\omega_d^2} \\]","title":"b. Particular (Steady-State) Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#23-resonance-and-energy-considerations","text":"Resonance occurs when driving frequency approaches natural frequency: \\[ \\omega_d \\approx \\omega_0 \\] At resonance, the amplitude becomes: \\[ B_{\\text{max}} = \\frac{A}{\\gamma \\omega_0} \\quad \\text{(approx. when } \\omega_d = \\omega_0 \\text{)} \\] Implications: Small damping \\(\\Rightarrow\\) large amplitudes (possible instability) Large damping \\(\\Rightarrow\\) suppressed resonance Total mechanical energy of the pendulum: \\[ E(t) = \\frac{1}{2} m L^2 \\left( \\frac{d\\theta}{dt} \\right)^2 + mgL (1 - \\cos(\\theta)) \\] Energy is maximized at resonance. Damping plays a critical role in dissipating energy and avoiding structural damage.","title":"2.3. Resonance and Energy Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#summary","text":"The forced damped pendulum showcases a variety of dynamic behaviors based on system parameters. Its equation demonstrates how nonlinear dynamics , resonance , and chaotic motion can emerge even from a seemingly simple system.","title":"Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#code-explanation-forced-damped-pendulum-simulation","text":"","title":"Code Explanation: Forced Damped Pendulum Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-parameters","text":"We begin by defining the physical constants and initial conditions for the pendulum system: Gravitational acceleration : $$ g = 9.81 \\, \\text{m/s}^2 $$ Pendulum length : $$ L = 1.0 \\, \\text{m} $$ Damping coefficient : $$ \\gamma = 0.1 \\, \\text{s}^{-1} $$ Forcing amplitude : $$ A = 1.2 $$ Driving frequency : $$ \\omega_d = \\omega_0 = \\sqrt{\\frac{g}{L}} \\approx 3.13 \\, \\text{rad/s} $$ This matches the natural frequency to investigate resonance conditions.","title":"1. Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-initial-conditions","text":"We start the simulation with: Initial angle (displacement): $$ \\theta(0) = 0.1 \\, \\text{rad} $$ Initial angular velocity: $$ \\dot{\\theta}(0) = 0.0 \\, \\text{rad/s} $$","title":"2. Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-ode-system-definition","text":"We model the system using the second-order nonlinear ODE: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega_d t) \\] This is rewritten as a first-order system: Let: - \\(x_1 = \\theta\\) (angle) - \\(x_2 = \\dot{\\theta}\\) (angular velocity) Then: \\[ \\begin{cases} \\frac{dx_1}{dt} = x_2 \\\\ \\frac{dx_2}{dt} = -\\gamma x_2 - \\omega_0^2 \\sin(x_1) + A \\cos(\\omega_d t) \\end{cases} \\] This system is implemented in code via a function like: def pendulum_derivatives(t, state): theta, omega = state dtheta_dt = omega domega_dt = -gamma * omega - (g / L) * np.sin(theta) + A * np.cos(omega_d * t) return np.array([dtheta_dt, domega_dt])","title":"3. ODE System Definition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-simulation","text":"This simulation investigates the dynamic behavior of a forced damped pendulum using Python's scientific libraries: NumPy , Matplotlib , and SciPy . The goal is to visualize the system's response under various damping and forcing conditions.","title":"Forced Damped Pendulum Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-setup","text":"The simulation initializes with the following parameters: Gravitational acceleration : $$ g = 9.81 \\, \\text{m/s}^2 $$ Pendulum length : $$ L = 1.0 \\, \\text{m} $$ Damping coefficients : $$ \\gamma = \\frac{b}{L}, \\quad \\text{where } b \\in {0.1, 0.5, 1.0} $$ Forcing amplitudes : $$ F_0 \\in {0.5, 1.2, 2.0} $$ Driving frequencies : $$ \\omega_d \\in {1.0, 2.0, 3.0} $$ Natural frequency : $$ \\omega_0 = \\sqrt{\\frac{g}{L}} \\approx 3.13 \\, \\text{rad/s} $$","title":"1. Setup"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-governing-equations","text":"The system is described by a nonlinear second-order differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = F_0 \\cos(\\omega_d t) \\] Rewriting as a system of first-order equations: Let \\(\\theta\\) be the angle Let \\(\\omega = \\frac{d\\theta}{dt}\\) be the angular velocity Then: \\[ \\frac{d\\theta}{dt} = \\omega \\] \\[ \\frac{d\\omega}{dt} = -\\gamma \\omega - \\omega_0^2 \\sin(\\theta) + F_0 \\cos(\\omega_d t) \\]","title":"2. Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-numerical-simulation","text":"Numerical integration is performed using the Runge-Kutta 4(5) method via solve_ivp . Simulation time span: \\(t \\in [0, 50]\\) seconds Initial conditions: $$ \\theta(0) = 0.1 \\, \\text{rad}, \\quad \\omega(0) = 0 \\, \\text{rad/s} $$","title":"3. Numerical Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-visualization","text":"","title":"4. Visualization"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#a-angular-displacement","text":"Plots \\(\\theta(t)\\) for each combination of \\(b\\) , \\(F_0\\) , and \\(\\omega_d\\) . Demonstrates how damping and external forcing affect the pendulum's motion.","title":"a. Angular Displacement"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#b-phase-portrait","text":"Plots \\(\\omega\\) vs. \\(\\theta\\) for one representative case. Illustrates the system's trajectory in phase space .","title":"b. Phase Portrait"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#c-poincare-section","text":"A discrete sampling of the phase space: $$ \\left(\\theta(t_n), \\omega(t_n)\\right) \\quad \\text{for every 20th time step} $$ Useful for detecting periodicity or chaos.","title":"c. Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#d-bifurcation-diagram","text":"Varies driving frequency \\(\\omega_d \\in [0.5, 3.0]\\) . For each \\(\\omega_d\\) , records final 50 values of \\(\\theta(t)\\) . Reveals transitions between periodic and chaotic regimes.","title":"d. Bifurcation Diagram"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-discussion","text":"","title":"5. Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations","text":"No small-angle approximation : The full nonlinear \\(\\sin(\\theta)\\) is used. Damping is linear : Realistic damping may be velocity-squared (quadratic). External forcing is idealized as perfectly periodic.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#possible-extensions","text":"Nonlinear damping : Include terms like \\(-k \\omega^2 \\operatorname{sign}(\\omega)\\) to better reflect air resistance. Stochastic forcing : Add noise to the forcing function to simulate real-world irregularities: $$ F_0 \\cos(\\omega_d t) + \\text{random noise} $$ Coupled pendulums : Expand to multiple pendulums interacting to explore multi-degree-of-freedom systems.","title":"Possible Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius 1. Motivation Kepler\u2019s Third Law states that the square of the orbital period \\(T\\) of a planet is proportional to the cube of its orbital radius \\(r\\) (semi-major axis in elliptical orbits). This relationship is derived from Newton\u2019s Law of Universal Gravitation and centripetal force balance in circular motion. This document will: Derive the relationship between \\(T\\) and \\(r\\) Discuss astronomical implications Implement a computational model Visualize the \\(T\\) \u2013 \\(r\\) relationship 2. Derivation of Kepler\u2019s Third Law (Circular Orbits) Newton\u2019s Law of Universal Gravitation: \\[ F_g = \\frac{G M m}{r^2} \\] Where: - \\(G\\) is the gravitational constant - \\(M\\) is the mass of the central body (e.g., Sun) - \\(m\\) is the mass of the orbiting object (e.g., planet) - \\(r\\) is the orbital radius Centripetal Force (for circular motion): \\[ F_c = \\frac{m v^2}{r} \\] Setting \\(F_g = F_c\\) : \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Cancel \\(m\\) : \\[ \\frac{G M}{r^2} = \\frac{v^2}{r} \\] Rearranged: \\[ v^2 = \\frac{G M}{r} \\] Orbital period is: \\[ T = \\frac{2\\pi r}{v} \\] Substitute \\(v\\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M} \\] 3. Implications of Kepler\u2019s Third Law 3.1 Determining Mass of Celestial Bodies Rearranged: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\] Example: Mass of the Sun Using Earth\u2019s values: - \\(r = 1 \\, \\text{AU} = 1.496 \\times 10^{11} \\, \\text{m}\\) - \\(T = 365.25 \\, \\text{days} = 3.156 \\times 10^7 \\, \\text{s}\\) Plug into the formula to estimate the Sun\u2019s mass. 3.2 Estimating Distances to Moons and Planets Given: \\[ T^2 \\propto r^3 \\] We can compute \\(r\\) from measured \\(T\\) : \\[ r = \\left( \\frac{G M T^2}{4\\pi^2} \\right)^{1/3} \\] Example: Jupiter\u2019s Moons Galileo observed their periods. Applying this relation gave their distances \u2014 a foundational method still used for exoplanets today. 3.3 Satellite Motion and Geostationary Orbits Satellites orbit Earth according to Kepler\u2019s law. For geostationary orbit , \\(T = 24\\) hours: \\[ r = \\left( \\frac{G M_\\text{Earth} T^2}{4\\pi^2} \\right)^{1/3} \\] This gives: \\[ r \\approx 4.22 \\times 10^7 \\, \\text{m} \\] Subtracting Earth\u2019s radius: \\[ \\text{Altitude} \\approx 35,786 \\, \\text{km} \\] 3.4 Exoplanet Discovery Transit Method : Measures \\(T\\) as a planet passes in front of a star Radial Velocity Method : Detects periodic shifts in starlight Apply: \\[ r^3 = \\frac{G M T^2}{4\\pi^2} \\] Used in NASA\u2019s Kepler Telescope to detect thousands of planets. 3.5 Binary Star Systems & Black Holes Kepler\u2019s Law works for two orbiting stars: \\[ T^2 = \\frac{4\\pi^2 r^3}{G (M_1 + M_2)} \\] Example: Cygnus X-1 The orbit of a visible star around an invisible companion led to the discovery of a black hole via its inferred mass. 3.6 Galactic Structure and Dark Matter Kepler\u2019s Law predicts orbital velocity: \\[ v = \\sqrt{\\frac{G M}{r}} \\Rightarrow v \\propto \\frac{1}{\\sqrt{r}} \\] But observations show flat rotation curves : \\[ v \\approx \\text{constant} \\] This implies: \\[ M(r) \\propto r \\] Evidence for dark matter \u2014 unseen mass influencing galactic dynamics. 4. Summary Kepler\u2019s Third Law relates \\(T^2 \\propto r^3\\) Enables measurement of masses, distances, and orbits Essential in astronomy, satellite technology, and exoplanet research Deviations in galaxies suggest presence of dark matter Real-World Example: Moon\u2019s Orbit Around Earth The Moon\u2019s orbit around Earth follows Kepler\u2019s Third Law. Given: - Earth\u2019s mass , - Orbital radius of the Moon , we can compute its orbital period . Computational Model The following Python script simulates a circular orbit and verifies Kepler\u2019s Third Law using numerical data. Explanation of the Code and Results This section explains the Python code used to simulate circular orbits and verify Kepler\u2019s Third Law through computational methods and visualizations. 1. Code Explanation a. Constants The following constants are defined using standard astronomical values: Gravitational constant: $$ G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\cdot \\text{kg}^{-1} \\cdot \\text{s}^{-2} $$ Mass of the Sun: $$ M_{\\odot} = 1.989 \\times 10^{30} \\, \\text{kg} $$ Mass of the Earth: $$ M_{\\oplus} = 5.972 \\times 10^{24} \\, \\text{kg} $$ b. Orbital Period Function The orbital period is calculated using: \\[ T = \\sqrt{\\frac{4\\pi^2 r^3}{G M}} \\] \\(r\\) : Orbital radius (m) \\(M\\) : Mass of the central body (Sun or Earth) \\(T\\) : Orbital period (converted from seconds to days for readability) c. Verification Plot: \\( T^2 \\) vs. \\( r^3 \\) Computes \\(T^2\\) and \\(r^3\\) for orbits around both the Sun and Earth. Plots these values to verify the relation: \\[ T^2 \\propto r^3 \\] Since: \\[ T^2 = \\frac{4\\pi^2}{G M} \\cdot r^3 \\] the graph should yield a straight line, where the slope is inversely proportional to the central mass ( \\(M\\) ). d. Orbit Simulation The function simulate_orbit(r, T) uses parametric equations to simulate circular motion: \\[ x(t) = r \\cos\\left(\\frac{2\\pi t}{T}\\right), \\quad y(t) = r \\sin\\left(\\frac{2\\pi t}{T}\\right) \\] \\(t\\) : Time sampled over one complete period Describes uniform circular motion Orbits simulated: Earth around the Sun Moon around Earth 2. Results and Verification Plot 1: \\( T \\) vs. \\( r \\) (Log-Log Scale) Description: - A log-log plot confirms that: \\[ T \\propto r^{3/2} \\] The straight lines indicate power-law behavior. Verification: - Linearity confirms Kepler\u2019s Third Law. - Slopes differ due to central mass: - Sun has a shallower slope (higher mass) - Earth has a steeper slope (lower mass) Plot 2: Circular Orbit Visualization Description: - Visual representation of two orbital paths: - Earth\u2019s orbit around the Sun (wide circle) - Moon\u2019s orbit around the Earth (smaller circle) Verification: - Orbits are visually circular, aligning with the assumption. - Time periods match real values: - Earth: \\(T_{\\text{Earth}} \\approx 365.25 \\, \\text{days}\\) - Moon: \\(T_{\\text{Moon}} \\approx 27.32 \\, \\text{days}\\) Printed Output Displayed numerical values: Orbital radii (m) Orbital periods (converted to days) These match known astronomical data, providing confidence in the simulation. 3. Conclusion \u2705 The code correctly models circular orbital mechanics \u2705 Log-log plot of \\(T\\) vs. \\(r\\) confirms Kepler\u2019s Third Law \u2705 Circular orbit visualization helps intuitively understand orbital motion \u2705 Computed periods match observational data , reinforcing the model\u2019s accuracy","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-motivation","text":"Kepler\u2019s Third Law states that the square of the orbital period \\(T\\) of a planet is proportional to the cube of its orbital radius \\(r\\) (semi-major axis in elliptical orbits). This relationship is derived from Newton\u2019s Law of Universal Gravitation and centripetal force balance in circular motion. This document will: Derive the relationship between \\(T\\) and \\(r\\) Discuss astronomical implications Implement a computational model Visualize the \\(T\\) \u2013 \\(r\\) relationship","title":"1. Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-derivation-of-keplers-third-law-circular-orbits","text":"","title":"2. Derivation of Kepler\u2019s Third Law (Circular Orbits)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#newtons-law-of-universal-gravitation","text":"\\[ F_g = \\frac{G M m}{r^2} \\] Where: - \\(G\\) is the gravitational constant - \\(M\\) is the mass of the central body (e.g., Sun) - \\(m\\) is the mass of the orbiting object (e.g., planet) - \\(r\\) is the orbital radius","title":"Newton\u2019s Law of Universal Gravitation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#centripetal-force-for-circular-motion","text":"\\[ F_c = \\frac{m v^2}{r} \\] Setting \\(F_g = F_c\\) : \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Cancel \\(m\\) : \\[ \\frac{G M}{r^2} = \\frac{v^2}{r} \\] Rearranged: \\[ v^2 = \\frac{G M}{r} \\] Orbital period is: \\[ T = \\frac{2\\pi r}{v} \\] Substitute \\(v\\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M} \\]","title":"Centripetal Force (for circular motion):"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-implications-of-keplers-third-law","text":"","title":"3. Implications of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#31-determining-mass-of-celestial-bodies","text":"Rearranged: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\]","title":"3.1 Determining Mass of Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-mass-of-the-sun","text":"Using Earth\u2019s values: - \\(r = 1 \\, \\text{AU} = 1.496 \\times 10^{11} \\, \\text{m}\\) - \\(T = 365.25 \\, \\text{days} = 3.156 \\times 10^7 \\, \\text{s}\\) Plug into the formula to estimate the Sun\u2019s mass.","title":"Example: Mass of the Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#32-estimating-distances-to-moons-and-planets","text":"Given: \\[ T^2 \\propto r^3 \\] We can compute \\(r\\) from measured \\(T\\) : \\[ r = \\left( \\frac{G M T^2}{4\\pi^2} \\right)^{1/3} \\]","title":"3.2 Estimating Distances to Moons and Planets"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-jupiters-moons","text":"Galileo observed their periods. Applying this relation gave their distances \u2014 a foundational method still used for exoplanets today.","title":"Example: Jupiter\u2019s Moons"},{"location":"1%20Physics/2%20Gravity/Problem_1/#33-satellite-motion-and-geostationary-orbits","text":"Satellites orbit Earth according to Kepler\u2019s law. For geostationary orbit , \\(T = 24\\) hours: \\[ r = \\left( \\frac{G M_\\text{Earth} T^2}{4\\pi^2} \\right)^{1/3} \\] This gives: \\[ r \\approx 4.22 \\times 10^7 \\, \\text{m} \\] Subtracting Earth\u2019s radius: \\[ \\text{Altitude} \\approx 35,786 \\, \\text{km} \\]","title":"3.3 Satellite Motion and Geostationary Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#34-exoplanet-discovery","text":"Transit Method : Measures \\(T\\) as a planet passes in front of a star Radial Velocity Method : Detects periodic shifts in starlight Apply: \\[ r^3 = \\frac{G M T^2}{4\\pi^2} \\] Used in NASA\u2019s Kepler Telescope to detect thousands of planets.","title":"3.4 Exoplanet Discovery"},{"location":"1%20Physics/2%20Gravity/Problem_1/#35-binary-star-systems-black-holes","text":"Kepler\u2019s Law works for two orbiting stars: \\[ T^2 = \\frac{4\\pi^2 r^3}{G (M_1 + M_2)} \\]","title":"3.5 Binary Star Systems &amp; Black Holes"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-cygnus-x-1","text":"The orbit of a visible star around an invisible companion led to the discovery of a black hole via its inferred mass.","title":"Example: Cygnus X-1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#36-galactic-structure-and-dark-matter","text":"Kepler\u2019s Law predicts orbital velocity: \\[ v = \\sqrt{\\frac{G M}{r}} \\Rightarrow v \\propto \\frac{1}{\\sqrt{r}} \\] But observations show flat rotation curves : \\[ v \\approx \\text{constant} \\] This implies: \\[ M(r) \\propto r \\] Evidence for dark matter \u2014 unseen mass influencing galactic dynamics.","title":"3.6 Galactic Structure and Dark Matter"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-summary","text":"Kepler\u2019s Third Law relates \\(T^2 \\propto r^3\\) Enables measurement of masses, distances, and orbits Essential in astronomy, satellite technology, and exoplanet research Deviations in galaxies suggest presence of dark matter Real-World Example: Moon\u2019s Orbit Around Earth The Moon\u2019s orbit around Earth follows Kepler\u2019s Third Law. Given: - Earth\u2019s mass , - Orbital radius of the Moon , we can compute its orbital period . Computational Model The following Python script simulates a circular orbit and verifies Kepler\u2019s Third Law using numerical data.","title":"4. Summary"},{"location":"1%20Physics/2%20Gravity/Problem_1/#explanation-of-the-code-and-results","text":"This section explains the Python code used to simulate circular orbits and verify Kepler\u2019s Third Law through computational methods and visualizations.","title":"Explanation of the Code and Results"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-code-explanation","text":"","title":"1. Code Explanation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#a-constants","text":"The following constants are defined using standard astronomical values: Gravitational constant: $$ G = 6.67430 \\times 10^{-11} \\, \\text{m}^3 \\cdot \\text{kg}^{-1} \\cdot \\text{s}^{-2} $$ Mass of the Sun: $$ M_{\\odot} = 1.989 \\times 10^{30} \\, \\text{kg} $$ Mass of the Earth: $$ M_{\\oplus} = 5.972 \\times 10^{24} \\, \\text{kg} $$","title":"a. Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#b-orbital-period-function","text":"The orbital period is calculated using: \\[ T = \\sqrt{\\frac{4\\pi^2 r^3}{G M}} \\] \\(r\\) : Orbital radius (m) \\(M\\) : Mass of the central body (Sun or Earth) \\(T\\) : Orbital period (converted from seconds to days for readability)","title":"b. Orbital Period Function"},{"location":"1%20Physics/2%20Gravity/Problem_1/#c-verification-plot-t2-vs-r3","text":"Computes \\(T^2\\) and \\(r^3\\) for orbits around both the Sun and Earth. Plots these values to verify the relation: \\[ T^2 \\propto r^3 \\] Since: \\[ T^2 = \\frac{4\\pi^2}{G M} \\cdot r^3 \\] the graph should yield a straight line, where the slope is inversely proportional to the central mass ( \\(M\\) ).","title":"c. Verification Plot: \\( T^2 \\) vs. \\( r^3 \\)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#d-orbit-simulation","text":"The function simulate_orbit(r, T) uses parametric equations to simulate circular motion: \\[ x(t) = r \\cos\\left(\\frac{2\\pi t}{T}\\right), \\quad y(t) = r \\sin\\left(\\frac{2\\pi t}{T}\\right) \\] \\(t\\) : Time sampled over one complete period Describes uniform circular motion Orbits simulated: Earth around the Sun Moon around Earth","title":"d. Orbit Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-results-and-verification","text":"","title":"2. Results and Verification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-1-t-vs-r-log-log-scale","text":"Description: - A log-log plot confirms that: \\[ T \\propto r^{3/2} \\] The straight lines indicate power-law behavior. Verification: - Linearity confirms Kepler\u2019s Third Law. - Slopes differ due to central mass: - Sun has a shallower slope (higher mass) - Earth has a steeper slope (lower mass)","title":"Plot 1: \\( T \\) vs. \\( r \\) (Log-Log Scale)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plot-2-circular-orbit-visualization","text":"Description: - Visual representation of two orbital paths: - Earth\u2019s orbit around the Sun (wide circle) - Moon\u2019s orbit around the Earth (smaller circle) Verification: - Orbits are visually circular, aligning with the assumption. - Time periods match real values: - Earth: \\(T_{\\text{Earth}} \\approx 365.25 \\, \\text{days}\\) - Moon: \\(T_{\\text{Moon}} \\approx 27.32 \\, \\text{days}\\)","title":"Plot 2: Circular Orbit Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_1/#printed-output","text":"Displayed numerical values: Orbital radii (m) Orbital periods (converted to days) These match known astronomical data, providing confidence in the simulation.","title":"Printed Output"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-conclusion","text":"\u2705 The code correctly models circular orbital mechanics \u2705 Log-log plot of \\(T\\) vs. \\(r\\) confirms Kepler\u2019s Third Law \u2705 Circular orbit visualization helps intuitively understand orbital motion \u2705 Computed periods match observational data , reinforcing the model\u2019s accuracy","title":"3. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Escape Velocities and Cosmic Velocities Motivation The concept of escape velocity is fundamental in understanding how to overcome a celestial body's gravitational pull. Expanding on this, the first , second , and third cosmic velocities describe the minimum speeds needed to: 1. Maintain a circular orbit (1st cosmic velocity), 2. Escape the body's gravity (2nd cosmic velocity), 3. Escape the solar system (3rd cosmic velocity). These principles guide space missions from satellite launches to interplanetary and interstellar exploration. Definitions of Cosmic Velocities First Cosmic Velocity ( \\(v_1\\) ) The minimum velocity required for an object to enter a stable circular orbit around a celestial body. Derived from: \\(\\frac{G M}{r} = v_1^2\\) \\[ v_1 = \\sqrt{\\frac{G M}{r}} \\] Second Cosmic Velocity ( \\(v_2\\) ) The escape velocity , or the speed needed to completely break free from a celestial body's gravity. \\[ v_2 = \\sqrt{2} \\cdot v_1 = \\sqrt{\\frac{2 G M}{r}} \\] Third Cosmic Velocity ( \\(v_3\\) ) The speed needed to escape not just the planet, but also its parent star's gravity (e.g., Earth + Sun). Approximate (simplified): \\[ v_3 \\approx \\sqrt{v_{sun}^2 + v_2^2} \\] Where \\(v_{sun}\\) is the orbital speed of the planet around the Sun. Python Implementation and Visualization import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # gravitational constant (m^3 kg^-1 s^-2) Celestial bodies: (mass in kg, radius in m) bodies = { \"Earth\": {\"M\": 5.972e24, \"R\": 6.371e6, \"v_sun\": 29.78e3}, \"Mars\": {\"M\": 6.417e23, \"R\": 3.3895e6, \"v_sun\": 24.07e3}, \"Jupiter\": {\"M\": 1.898e27, \"R\": 6.9911e7, \"v_sun\": 13.07e3} } Compute velocities results = {} for name, data in bodies.items(): M = data[\"M\"] R = data[\"R\"] v1 = np.sqrt(G * M / R) v2 = np.sqrt(2) * v1 v3 = np.sqrt(v2 2 + data[\"v_sun\"] 2) results[name] = {\"v1\": v1, \"v2\": v2, \"v3\": v3} Display results for name, v in results.items(): print(f\"\\n{name}:\") print(f\" First Cosmic Velocity (Orbit): {v['v1'] / 1000:.2f} km/s\") print(f\" Second Cosmic Velocity (Escape): {v['v2'] / 1000:.2f} km/s\") print(f\" Third Cosmic Velocity (Interstellar): {v['v3'] / 1000:.2f} km/s\") Plotting labels = list(results.keys()) v1_vals = [results[body]['v1'] / 1000 for body in labels] v2_vals = [results[body]['v2'] / 1000 for body in labels] v3_vals = [results[body]['v3'] / 1000 for body in labels] x = np.arange(len(labels)) width = 0.25 plt.figure(figsize=(10,6)) plt.bar(x - width, v1_vals, width, label='v1 (Orbit)') plt.bar(x, v2_vals, width, label='v2 (Escape)') plt.bar(x + width, v3_vals, width, label='v3 (Solar Escape)') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.xticks(x, labels) plt.legend() plt.grid(True, axis='y') plt.tight_layout() plt.show()","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"The concept of escape velocity is fundamental in understanding how to overcome a celestial body's gravitational pull. Expanding on this, the first , second , and third cosmic velocities describe the minimum speeds needed to: 1. Maintain a circular orbit (1st cosmic velocity), 2. Escape the body's gravity (2nd cosmic velocity), 3. Escape the solar system (3rd cosmic velocity). These principles guide space missions from satellite launches to interplanetary and interstellar exploration.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions-of-cosmic-velocities","text":"","title":"Definitions of Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-v_1","text":"The minimum velocity required for an object to enter a stable circular orbit around a celestial body. Derived from: \\(\\frac{G M}{r} = v_1^2\\) \\[ v_1 = \\sqrt{\\frac{G M}{r}} \\]","title":"First Cosmic Velocity (\\(v_1\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-v_2","text":"The escape velocity , or the speed needed to completely break free from a celestial body's gravity. \\[ v_2 = \\sqrt{2} \\cdot v_1 = \\sqrt{\\frac{2 G M}{r}} \\]","title":"Second Cosmic Velocity (\\(v_2\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-v_3","text":"The speed needed to escape not just the planet, but also its parent star's gravity (e.g., Earth + Sun). Approximate (simplified): \\[ v_3 \\approx \\sqrt{v_{sun}^2 + v_2^2} \\] Where \\(v_{sun}\\) is the orbital speed of the planet around the Sun.","title":"Third Cosmic Velocity (\\(v_3\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-implementation-and-visualization","text":"import numpy as np import matplotlib.pyplot as plt","title":"Python Implementation and Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.67430e-11 # gravitational constant (m^3 kg^-1 s^-2)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-bodies-mass-in-kg-radius-in-m","text":"bodies = { \"Earth\": {\"M\": 5.972e24, \"R\": 6.371e6, \"v_sun\": 29.78e3}, \"Mars\": {\"M\": 6.417e23, \"R\": 3.3895e6, \"v_sun\": 24.07e3}, \"Jupiter\": {\"M\": 1.898e27, \"R\": 6.9911e7, \"v_sun\": 13.07e3} }","title":"Celestial bodies: (mass in kg, radius in m)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#compute-velocities","text":"results = {} for name, data in bodies.items(): M = data[\"M\"] R = data[\"R\"] v1 = np.sqrt(G * M / R) v2 = np.sqrt(2) * v1 v3 = np.sqrt(v2 2 + data[\"v_sun\"] 2) results[name] = {\"v1\": v1, \"v2\": v2, \"v3\": v3}","title":"Compute velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#display-results","text":"for name, v in results.items(): print(f\"\\n{name}:\") print(f\" First Cosmic Velocity (Orbit): {v['v1'] / 1000:.2f} km/s\") print(f\" Second Cosmic Velocity (Escape): {v['v2'] / 1000:.2f} km/s\") print(f\" Third Cosmic Velocity (Interstellar): {v['v3'] / 1000:.2f} km/s\")","title":"Display results"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plotting","text":"labels = list(results.keys()) v1_vals = [results[body]['v1'] / 1000 for body in labels] v2_vals = [results[body]['v2'] / 1000 for body in labels] v3_vals = [results[body]['v3'] / 1000 for body in labels] x = np.arange(len(labels)) width = 0.25 plt.figure(figsize=(10,6)) plt.bar(x - width, v1_vals, width, label='v1 (Orbit)') plt.bar(x, v2_vals, width, label='v2 (Escape)') plt.bar(x + width, v3_vals, width, label='v3 (Solar Escape)') plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.xticks(x, labels) plt.legend() plt.grid(True, axis='y') plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Trajectories of a Freely Released Payload Near Earth Motivation When a payload is released from a moving rocket near Earth, its trajectory is governed by gravity and its initial velocity. The result could be: A circular or elliptical orbit (if speed is below escape velocity), A parabolic trajectory (if speed equals escape velocity), A hyperbolic trajectory (if speed exceeds escape velocity), Or a reentry if the speed is insufficient to sustain orbit. These outcomes are critical for satellite deployment, deorbiting modules, and interplanetary missions. Theoretical Background The motion of a payload near Earth is governed by Newton's Law of Gravitation : \\[ F = \\frac{G M m}{r^2} \\] This force causes acceleration toward Earth: \\[ \\vec{a} = -\\frac{G M}{r^2} \\hat{r} \\] Where: - \\(G\\) is the gravitational constant, - \\(M\\) is Earth's mass, - \\(r\\) is the distance to Earth's center. The trajectory depends on the initial velocity vector \\(\\vec{v}_0\\) . Depending on \\(|\\vec{v}_0|\\) , the object may fall back, orbit, or escape. Python Simulation of Payload Trajectories We use numerical integration (Euler or Runge-Kutta) to simulate the path. import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 M = 5.972e24 # kg (Earth) R_earth = 6.371e6 # m (Earth radius) Time setup dt = 1 # seconds t_max = 10000 # total simulation time in seconds steps = int(t_max / dt) Initial conditions altitude = 400e3 # 400 km above Earth r0 = np.array([R_earth + altitude, 0]) # initial position speeds = [5000, 7670, 11000, 11200] # vary speed to test different paths (m/s) labels = ['Reentry', 'Stable Orbit', 'Escape', 'Hyperbolic'] def simulate_trajectory(v0_mag): r = r0.copy() v = np.array([0, v0_mag]) traj = [r.copy()] for _ in range(steps): r_mag = np.linalg.norm(r) a = -G * M / r_mag**3 * r v += a * dt r += v * dt if r_mag < R_earth: break # crashed traj.append(r.copy()) return np.array(traj) Plot all trajectories plt.figure(figsize=(8,8)) theta = np.linspace(0, 2*np.pi, 100) earth_x = R_earth * np.cos(theta) earth_y = R_earth * np.sin(theta) plt.plot(earth_x, earth_y, 'b', label='Earth') for v0, label in zip(speeds, labels): traj = simulate_trajectory(v0) plt.plot(traj[:,0], traj[:,1], label=f'{label} ({v0/1000:.1f} km/s)') plt.axis('equal') plt.grid(True) plt.xlabel('X Position (m)') plt.ylabel('Y Position (m)') plt.title('Payload Trajectories from 400 km Altitude') plt.legend() plt.show()","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#motivation","text":"When a payload is released from a moving rocket near Earth, its trajectory is governed by gravity and its initial velocity. The result could be: A circular or elliptical orbit (if speed is below escape velocity), A parabolic trajectory (if speed equals escape velocity), A hyperbolic trajectory (if speed exceeds escape velocity), Or a reentry if the speed is insufficient to sustain orbit. These outcomes are critical for satellite deployment, deorbiting modules, and interplanetary missions.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#theoretical-background","text":"The motion of a payload near Earth is governed by Newton's Law of Gravitation : \\[ F = \\frac{G M m}{r^2} \\] This force causes acceleration toward Earth: \\[ \\vec{a} = -\\frac{G M}{r^2} \\hat{r} \\] Where: - \\(G\\) is the gravitational constant, - \\(M\\) is Earth's mass, - \\(r\\) is the distance to Earth's center. The trajectory depends on the initial velocity vector \\(\\vec{v}_0\\) . Depending on \\(|\\vec{v}_0|\\) , the object may fall back, orbit, or escape.","title":"Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-simulation-of-payload-trajectories","text":"We use numerical integration (Euler or Runge-Kutta) to simulate the path. import numpy as np import matplotlib.pyplot as plt","title":"Python Simulation of Payload Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#constants","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 M = 5.972e24 # kg (Earth) R_earth = 6.371e6 # m (Earth radius)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_3/#time-setup","text":"dt = 1 # seconds t_max = 10000 # total simulation time in seconds steps = int(t_max / dt)","title":"Time setup"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions","text":"altitude = 400e3 # 400 km above Earth r0 = np.array([R_earth + altitude, 0]) # initial position speeds = [5000, 7670, 11000, 11200] # vary speed to test different paths (m/s) labels = ['Reentry', 'Stable Orbit', 'Escape', 'Hyperbolic'] def simulate_trajectory(v0_mag): r = r0.copy() v = np.array([0, v0_mag]) traj = [r.copy()] for _ in range(steps): r_mag = np.linalg.norm(r) a = -G * M / r_mag**3 * r v += a * dt r += v * dt if r_mag < R_earth: break # crashed traj.append(r.copy()) return np.array(traj)","title":"Initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plot-all-trajectories","text":"plt.figure(figsize=(8,8)) theta = np.linspace(0, 2*np.pi, 100) earth_x = R_earth * np.cos(theta) earth_y = R_earth * np.sin(theta) plt.plot(earth_x, earth_y, 'b', label='Earth') for v0, label in zip(speeds, labels): traj = simulate_trajectory(v0) plt.plot(traj[:,0], traj[:,1], label=f'{label} ({v0/1000:.1f} km/s)') plt.axis('equal') plt.grid(True) plt.xlabel('X Position (m)') plt.ylabel('Y Position (m)') plt.title('Payload Trajectories from 400 km Altitude') plt.legend() plt.show()","title":"Plot all trajectories"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Interference Patterns on a Water Surface Motivation When waves from multiple sources meet on a water surface, they interfere \u2014 adding or canceling each other depending on their phase. This project simulates interference patterns from coherent point sources placed at the vertices of a regular polygon . Problem Setup We simulate wave interference from 4 coherent sources placed at the vertices of a square . Each source emits circular waves of the same frequency, amplitude, and phase. The resulting displacement at each point on the water surface is given by: \\[ u(x, y, t) = \\sum_{i=1}^{N} A \\cdot \\sin(k r_i - \\omega t + \\phi) \\] Where: - \\(A\\) : amplitude - \\(k = \\frac{2\\pi}{\\lambda}\\) : wave number - \\(\\omega = 2\\pi f\\) : angular frequency - \\(r_i\\) : distance from source \\(i\\) to point \\((x, y)\\) - \\(N\\) : number of sources Python Simulation import numpy as np import matplotlib.pyplot as plt Parameters A = 1.0 # Amplitude \u03bb = 1.0 # Wavelength (meters) f = 1.0 # Frequency (Hz) \u03c9 = 2 * np.pi * f # Angular frequency k = 2 * np.pi / \u03bb # Wave number \u03c6 = 0 # Initial phase N = 4 # Number of sources (square) Grid setup grid_size = 200 x = np.linspace(-5, 5, grid_size) y = np.linspace(-5, 5, grid_size) X, Y = np.meshgrid(x, y) Polygon vertices (square centered at origin, side length 4) side = 4 L = side / np.sqrt(2) sources = [ (-L, -L), (-L, L), (L, -L), (L, L) ] Time snapshot t = 0 # You can change this or animate over time Superpose waves from all sources U = np.zeros_like(X) for (x0, y0) in sources: r = np.sqrt((X - x0) 2 + (Y - y0) 2) U += A * np.sin(k * r - \u03c9 * t + \u03c6) Plotting plt.figure(figsize=(8, 6)) plt.contourf(X, Y, U, levels=100, cmap='viridis') plt.colorbar(label='Wave Displacement') plt.scatter( zip( sources), color='red', label='Sources') plt.title('Wave Interference Pattern (Square Configuration)') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.legend() plt.axis('equal') plt.grid(False) plt.show() Observations The bright regions correspond to constructive interference (waves reinforcing). The dark regions are areas of destructive interference (waves cancelling). The symmetric pattern arises from the square geometry of the source placement. Next Steps Try other polygons: triangle (3), pentagon (5), hexagon (6) Animate the surface: simulate time evolution with t varying Try random phases or incoherent sources Conclusion This simulation shows how simple wave equations can create beautiful and complex interference patterns . Understanding these patterns helps explain physical phenomena from sound and light to quantum waves. \ud83d\udca7 \"Where waves meet, patterns emerge.\"","title":"Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#interference-patterns-on-a-water-surface","text":"","title":"Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#motivation","text":"When waves from multiple sources meet on a water surface, they interfere \u2014 adding or canceling each other depending on their phase. This project simulates interference patterns from coherent point sources placed at the vertices of a regular polygon .","title":"Motivation"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-setup","text":"We simulate wave interference from 4 coherent sources placed at the vertices of a square . Each source emits circular waves of the same frequency, amplitude, and phase. The resulting displacement at each point on the water surface is given by: \\[ u(x, y, t) = \\sum_{i=1}^{N} A \\cdot \\sin(k r_i - \\omega t + \\phi) \\] Where: - \\(A\\) : amplitude - \\(k = \\frac{2\\pi}{\\lambda}\\) : wave number - \\(\\omega = 2\\pi f\\) : angular frequency - \\(r_i\\) : distance from source \\(i\\) to point \\((x, y)\\) - \\(N\\) : number of sources","title":"Problem Setup"},{"location":"1%20Physics/3%20Waves/Problem_1/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt","title":"Python Simulation"},{"location":"1%20Physics/3%20Waves/Problem_1/#parameters","text":"A = 1.0 # Amplitude \u03bb = 1.0 # Wavelength (meters) f = 1.0 # Frequency (Hz) \u03c9 = 2 * np.pi * f # Angular frequency k = 2 * np.pi / \u03bb # Wave number \u03c6 = 0 # Initial phase N = 4 # Number of sources (square)","title":"Parameters"},{"location":"1%20Physics/3%20Waves/Problem_1/#grid-setup","text":"grid_size = 200 x = np.linspace(-5, 5, grid_size) y = np.linspace(-5, 5, grid_size) X, Y = np.meshgrid(x, y)","title":"Grid setup"},{"location":"1%20Physics/3%20Waves/Problem_1/#polygon-vertices-square-centered-at-origin-side-length-4","text":"side = 4 L = side / np.sqrt(2) sources = [ (-L, -L), (-L, L), (L, -L), (L, L) ]","title":"Polygon vertices (square centered at origin, side length 4)"},{"location":"1%20Physics/3%20Waves/Problem_1/#time-snapshot","text":"t = 0 # You can change this or animate over time","title":"Time snapshot"},{"location":"1%20Physics/3%20Waves/Problem_1/#superpose-waves-from-all-sources","text":"U = np.zeros_like(X) for (x0, y0) in sources: r = np.sqrt((X - x0) 2 + (Y - y0) 2) U += A * np.sin(k * r - \u03c9 * t + \u03c6)","title":"Superpose waves from all sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#plotting","text":"plt.figure(figsize=(8, 6)) plt.contourf(X, Y, U, levels=100, cmap='viridis') plt.colorbar(label='Wave Displacement') plt.scatter( zip( sources), color='red', label='Sources') plt.title('Wave Interference Pattern (Square Configuration)') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.legend() plt.axis('equal') plt.grid(False) plt.show()","title":"Plotting"},{"location":"1%20Physics/3%20Waves/Problem_1/#observations","text":"The bright regions correspond to constructive interference (waves reinforcing). The dark regions are areas of destructive interference (waves cancelling). The symmetric pattern arises from the square geometry of the source placement.","title":"Observations"},{"location":"1%20Physics/3%20Waves/Problem_1/#next-steps","text":"Try other polygons: triangle (3), pentagon (5), hexagon (6) Animate the surface: simulate time evolution with t varying Try random phases or incoherent sources","title":"Next Steps"},{"location":"1%20Physics/3%20Waves/Problem_1/#conclusion","text":"This simulation shows how simple wave equations can create beautiful and complex interference patterns . Understanding these patterns helps explain physical phenomena from sound and light to quantum waves. \ud83d\udca7 \"Where waves meet, patterns emerge.\"","title":"Conclusion"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}